(require 'cl-opengl)
(require 'cl-glut)
(require 'cl-glu)
(require :babel)

(defmacro pushback (el lst)
  `(if (null ,lst)
     (setf ,lst (list ,el))
     (nconc ,lst (list ,el))))

(defun convert-to-float (b)
  (let ((a (/ (+ (aref b 0) (ash (aref b 1) 8) (ash (logand #b01111111 (aref b 2)) 16)) (ash 1 23)))
        (b (+ (ash (aref b 2) -7) (ash (logand #b01111111 (aref b 3)) 1)))
        (c (ash (aref b 3) -7)))
    (float (* (expt -1 c) (expt 2 (- b 127)) (+ 1 a)))
    )
  )

(defun convert-to-int (b &optional (size 4))
  (let ((sum 0))
    (dotimes (i size)
      (setf sum (+ sum (ash (aref b i) (* i 8))))
      )
    sum
    )
  )

(defclass vertex ()
  ((locate :accessor vertex-locate :initform (make-array 3))
   (normal :accessor vertex-normal :initform (make-array 3))
   (uv :accessor vertex-uv :initform (make-array 2))
   (ex-uv :accessor vertex-ex-uv :initform nil)
   (weight-type :accessor vertex-weight-type)
   (bone-index :accessor vertex-bone-index :initform (make-array 4 :initial-contents #(-1 -1 -1 -1)))
   (bone-weight :accessor vertex-bone-weight :initform (make-array 4 :initial-contents #(0 0 0 0)))
   (sdef-c :accessor vertex-sdef-c :initform (make-array 3))
   (sdef-r0 :accessor vertex-sdef-r0 :initform (make-array 3))
   (sdef-r1 :accessor vertex-sdef-r1 :initform (make-array 3))
   (edge-mag :accessor vertex-edge-mag)
   (ex-uv-num :accessor vertex-ex-uv-num)
   (id :accessor vertex-id)
   )
  )

(defmethod read-data ((v vertex) fstream info id)
  (setf (vertex-id v) id)
  (setf (vertex-ex-uv-num v) (aref info 1))
  (let* ((bin (make-array 4 :element-type '(unsigned-byte 8)))
         (intsize (aref info 5))
         (intbin (make-array intsize :element-type '(unsigned-byte 8))))
    (dotimes (i 3)
      (read-sequence bin fstream)
      (setf (aref (vertex-locate v) i) (convert-to-float bin))
      )
    (dotimes (i 3)
      (read-sequence bin fstream)
      (setf (aref (vertex-normal v) i) (convert-to-float bin))
      )
    (dotimes (i 2)
      (read-sequence bin fstream)
      (setf (aref (vertex-uv v) i) (convert-to-float bin))
      )
    (setf (vertex-ex-uv v) (make-array (vertex-ex-uv-num v)))
    (dotimes (i (vertex-ex-uv-num v))
      (setf (aref (vertex-ex-uv v) i) (make-array 4))
      (dotimes (j 4)
        (read-sequence bin fstream)
        (setf (aref (aref (vertex-ex-uv v) i) j) (convert-to-float bin))
        )
      )
    (let ((bin1 (make-array 1 :element-type '(unsigned-byte 8))))
      (read-sequence bin1 fstream)
      (setf (vertex-weight-type v) (convert-to-int bin1 1)))
    (case (vertex-weight-type v)
      (0
       (read-sequence intbin fstream)
       (setf (aref (vertex-bone-index v) 0) (convert-to-int intbin intsize))
       (setf (aref (vertex-bone-weight v) 0) 1.0)
       )
      (1
       (dotimes (i 2)
         (read-sequence intbin fstream)
         (setf (aref (vertex-bone-index v) i) (convert-to-int intbin intsize))
         )
       (read-sequence bin fstream)
       (setf (aref (vertex-bone-weight v) 0) (convert-to-float bin))
       (setf (aref (vertex-bone-weight v) 1) (- 1.0 (aref (vertex-bone-weight v) 0)))
       )
      (2
       (dotimes (i 4)
         (read-sequence intbin fstream)
         (setf (aref (vertex-bone-index v) i) (convert-to-int intbin intsize))
         )
       (dotimes (i 4)
         (read-sequence bin fstream)
         (setf (aref (vertex-bone-weight v) i) (convert-to-float bin))
         )
       )
      (3
       (dotimes (i 2)
         (read-sequence intbin fstream)
         (setf (aref (vertex-bone-index v) i) (convert-to-int intbin intsize))
         )
       (read-sequence bin fstream)
       (setf (aref (vertex-bone-weight v) 0) (convert-to-float bin))
       (setf (aref (vertex-bone-weight v) 1) (- 1.0 (aref (vertex-bone-weight v) 0)))
       (dotimes (i 3)
         (read-sequence bin fstream)
         (setf (aref (vertex-sdef-c v) i) (convert-to-float bin))
         )
       (dotimes (i 3)
         (read-sequence bin fstream)
         (setf (aref (vertex-sdef-r0 v) i) (convert-to-float bin))
         )
       (dotimes (i 3)
         (read-sequence bin fstream)
         (setf (aref (vertex-sdef-r1 v) i) (convert-to-float bin))
         )
       )
      )
    (read-sequence bin fstream)
    (setf (vertex-edge-mag v) (convert-to-float bin))
    )
  )

(defclass face ()
  ((vertex-index :accessor face-vertex-index)
   )
  )

(defclass mmd-model ()
  ((info-byte :accessor mmd-model-info-byte :initform (make-array 1 :element-type '(unsigned-byte 8)))
   (info :accessor mmd-model-info :initform (make-array 8 :element-type '(unsigned-byte 8)))
   (text-list :accessor mmd-model-text-list :initform nil)
   (vertex-num :accessor mmd-model-vertex-num)
   (vertex-list :accessor mmd-model-vertex-list)
   (face-num :accessor mmd-model-face-num)
   (face-list :accessor mmd-model-face-list)
   (vertex-index :accessor mmd-model-vertex-index :initform nil)
   (normal-index :accessor mmd-model-normal-index :initform nil)
   ))

(defmethod read-model ((self mmd-model) fname)
  (with-open-file (in fname :element-type :default)
    (read-sequence (make-array 4 :element-type '(unsigned-byte 8)) in)
    (let ((bin (make-array 4 :element-type '(unsigned-byte 8))))
      (read-sequence bin in)
      (format t "Version: ~A~%" (convert-to-float bin))
      )
    (read-sequence (mmd-model-info-byte self) in)
    (read-sequence (mmd-model-info self) in)
    (dotimes (i 4)
      (let ((num (make-array 4 :element-type '(unsigned-byte 8)))
            (text))
        (read-sequence num in)
        (setq text (make-array (convert-to-int num) :element-type '(unsigned-byte 8)))
        (read-sequence text in)
        (setq text (concatenate '(vector (unsigned-byte 8)) (make-array 2 :element-type '(unsigned-byte 8) :initial-contents '(255 254)) text))
        ;;(print (babel:octets-to-string text :encoding :utf-16))
        (setf (mmd-model-text-list self) (append (mmd-model-text-list self) (list (babel:octets-to-string text :encoding :utf-16))))
        )
      )
    (let ((bin (make-array 4 :element-type '(unsigned-byte 8))))
      (read-sequence bin in)
      (setf (mmd-model-vertex-num self) (convert-to-int bin))
      )
    (setf (mmd-model-vertex-list self) (make-array (mmd-model-vertex-num self)))
    (dotimes (i (mmd-model-vertex-num self))
      (setf (aref (mmd-model-vertex-list self) i) (make-instance 'vertex))
      (read-data (aref (mmd-model-vertex-list self) i) in (mmd-model-info self) i)
    ;;  (let ((locate (vertex-locate (aref (mmd-model-vertex-list self) i)))
    ;;        (normal (vertex-normal (aref (mmd-model-vertex-list self) i))))
    ;;    (dotimes (j 3)
    ;;      (pushback (aref locate j) (mmd-model-vertex-index self))
    ;;      (pushback (aref normal j) (mmd-model-normal-index self))
    ;;      )
    ;;    )
      )
    (let ((bin (make-array 4 :element-type '(unsigned-byte 8))))
      (read-sequence bin in)
      (setf (mmd-model-face-num self) (convert-to-int bin))
      )
    (setf (mmd-model-face-list self) (make-array (mmd-model-face-num self)))
    )
  (print (mmd-model-text-list self))
  )

;;(defmethod display ((self mmd-model))
;;  (gl:clear :color-buffer-bit :depth-buffer-bit)
;;  (gl:push-matrix)
;;  (gl:enable-client-state :vertex-array)
;;  (gl:enable-client-state :normal-array)
;;  ;;(gl:enable-client-state :texture-coord-array)
;;
;;  (gl:vertex-pointer 3 :float 0 (mmd-model-vertex-index self))
;;  (gl:normal-pointer 3 :float 0 (mmd-model-normal-index self))
;;
;;  (gl:disable-client-state :vertex-array)
;;  (gl:disable-client-state :normal-array)
;;  ;;(gl:disable-client-state :texture-coord-array)
;;
;;  (gl:pop-matrix)
;;  (glut:swap-buffers)
;;  (gl:flush)
;;  )

(defmethod display ((self mmd-model))
  (gl:clear :color-buffer-bit :depth-buffer-bit)
  (gl:push-matrix)

  (gl:begin :points)
  (dotimes (i (mmd-model-vertex-num self))
    (let ((l (vertex-locate (aref (mmd-model-vertex-list self) i))))
      (gl:vertex (aref l 0) (aref l 1) (aref l 2))
      )
    )
  (gl:end)

  (gl:pop-matrix)
  (glut:swap-buffers)
  (gl:flush)
  )

(defmethod texture-config ((self mmd-model))
  )

(defun test ()
  (setq *m* (make-instance 'mmd-model))
  (read-model *m* "二式大艇さん.pmx"))
