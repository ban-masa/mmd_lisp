(require 'cl-opengl)
(require 'cl-glut)
(require 'cl-glu)
(require :babel)

(defun convert-to-float (b)
  (let ((a (/ (+ (aref b 0) (ash (aref b 1) 8) (ash (logand #b01111111 (aref b 2)) 16)) (ash 1 23)))
        (b (+ (ash (aref b 2) -7) (ash (logand #b01111111 (aref b 3)) 1)))
        (c (ash (aref b 3) -7)))
    (float (* (expt -1 c) (expt 2 (- b 127)) (+ 1 a)))
    )
  )

(defun convert-to-int (b)
  (+ (aref b 0) (ash (aref b 1) 8) (ash (aref b 2) 16) (ash (aref b 3) 24)))

(defclass vertex ()
  ((locate :accessor vertex-locate :initform (make-array 3))
   (normal :accessor vertex-normal :initform (make-array 3))
   (uv :accessor vertex-uv :initform (make-array 2))
   (ex-uv :accessor vertex-ex-uv)
   (weight-type :accessor vertex-weight-type)
   (bone-index :accessor vertex-bone-index :initform (make-array 4))
   (sdef-c :accessor vertex-sdef-c :initform (make-array 3))
   (sdef-r0 :accessor vertex-sdef-r0 :initform (make-array 3))
   (sdef-r1 :accessor vertex-sdef-r1 :initform (make-array 3))
   (edge-mag :accessor vertex-edge-mag)
   (ex-uv-num :accessor vertex-ex-uv-num)
   (id :accessor vertex-id)
   )
  )

(defmethod read-data ((v vertex))
  )


(defclass mmd-model ()
  ((info-byte :accessor mmd-model-info-byte :initform (make-array 1 :element-type '(unsigned-byte 8)))
   (info :accessor mmd-model-info :initform (make-array 8 :element-type '(unsigned-byte 8)))
   (name-jp :accessor mmd-model-name-jp)
   (name-en :accessor mmd-model-name-en)
   (comment-jp :accessor mmd-model-comment-jp)
   (comment-en :accessor mmd-model-comment-en)
   ))

(defmethod read-model ((self mmd-model) fname)
  (with-open-file (in fname :element-type :default)
    (read-sequence (make-array 4 :element-type '(unsigned-byte 8)) in)
    (let ((bin (make-array 4 :element-type '(unsigned-byte 8))))
      (read-sequence bin in)
      (format t "Version: ~A~%" (convert-to-float bin))
      )
    (read-sequence (mmd-model-info-byte m) in)
    (read-sequence (mmd-model-info m) in)
    (dotimes (i 4)
      (let ((num (make-array 4 :element-type '(unsigned-byte 8)))
            (text))
        (read-sequence num in)
        (setq text (make-array (convert-to-int num) :element-type '(unsigned-byte 8)))
        (read-sequence text in)
        (setq text (concatenate '(vector (unsigned-byte 8)) (make-array 2 :element-type '(unsigned-byte 8) :initial-contents '(255 254)) text))
        (print text)
        (print (babel:octets-to-string text :encoding :utf-16))
        )
      )
    )
  )

(defmethod display ((self mmd-model))
  )

(defmethod texture-config ((self mmd-model))
  )

(defun test ()
  (setq m (make-instance 'mmd-model))
  (read-model m "二式大艇さん.pmx"))
